package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	model1 "github.com/Courtcircuits/tad-beep/pocs/inter-service/gateway/application/graphql/graph/model"
	"github.com/Courtcircuits/tad-beep/pocs/inter-service/gateway/types"
)

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, message model1.NewMessage) (*model1.Message, error) {
	message_result, err := r.MessageService.SendMessage(ctx, &types.Message{
		Content:   message.Content,
		ChannelID: message.Channel,
		OwnerID:   message.Owner,
	})
	if err != nil {
		return nil, err
	}
	return &model1.Message{
		ID:        message_result.MessageID,
		Content:   message_result.Content,
		ChannelID: message_result.ChannelID,
		CreatedAt: message_result.CreatedAt,
		Owner:     message_result.OwnerID,
	}, nil
}

// SearchMessages is the resolver for the searchMessages field.
func (r *queryResolver) SearchMessages(ctx context.Context, query string, channelID string) ([]*model1.Message, error) {
	messages, err := r.MessageService.SearchMessage(ctx, channelID, query)
	if err != nil {
		return nil, err
	}
	messages_map := make([]*model1.Message, len(messages))
	for i, message := range messages {
		messages_map[i] = &model1.Message{
			ID:        message.MessageID,
			Content:   message.Content,
			ChannelID: message.ChannelID,
			CreatedAt: message.CreatedAt,
			Owner:     message.OwnerID,
		}
	}
	return messages_map, nil
}

// GetMessages is the resolver for the getMessages field.
func (r *subscriptionResolver) GetMessages(ctx context.Context, channelID string, ownerID string) (<-chan []*model1.Message, error) {
	chan_message, err := r.MessageService.GetMessages(ctx, channelID, ownerID)
	if err != nil {
		return nil, err
	}
	chan_target := make(chan []*model1.Message)
	go func() {
		for {
			select {
			case message := <-chan_message:
				messages := []*model1.Message{{
					ID:        message.MessageID,
					Content:   message.Content,
					ChannelID: message.ChannelID,
					CreatedAt: message.CreatedAt,
					Owner:     message.OwnerID,
				},
				}
				chan_target <- messages
			case <-ctx.Done():
				return
			}
		}
	}()
	return chan_target, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
